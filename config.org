#+title: Emacs Config
#+author: Williams Parre
#+startup: indent showall 

* Table Of Contents :toc:
- [[#emacs-startup-performance][Emacs Startup Performance]]
- [[#package-manager][Package Manager]]
- [[#wrapper-using-package-vc][Wrapper using package-vc]]
- [[#garbage-collection-magic-hack-package][Garbage Collection Magic Hack Package]]
- [[#basic-settings][Basic Settings]]
  - [[#defaults][Defaults]]
  - [[#electric-configuration][Electric Configuration]]
  - [[#custom-requirements][Custom Requirements]]
- [[#themes][Themes]]
- [[#customization-of-frame-alist][Customization of Frame Alist]]
- [[#evil-mode][Evil Mode]]
- [[#whichkey][WhichKey]]
- [[#vertico][Vertico]]
- [[#marginalia][Marginalia]]
- [[#orderless][Orderless]]
- [[#consult][Consult]]
- [[#general-key-bindings][General Key Bindings]]
- [[#doom-modeline][Doom Modeline]]
- [[#org-mode-configuration][Org Mode Configuration]]
  - [[#ui-customization][UI Customization]]
  - [[#babel-configuration][Babel Configuration]]
  - [[#structure-templates][Structure Templates]]
  - [[#toc][Toc]]
- [[#backup-files][Backup Files]]
- [[#cp-setup][CP Setup]]
  - [[#format-settings][Format Settings]]
  - [[#tempalte-settings][Tempalte Settings]]
  - [[#custom-codes][Custom Codes]]
- [[#editor-config][Editor Config]]
- [[#indent-guide][Indent-Guide]]
- [[#bracket-colorize][Bracket Colorize]]
- [[#magit][Magit]]
- [[#toggle-term][Toggle-Term]]
- [[#format-all][Format-All]]
- [[#hl-line-mode][Hl Line Mode]]
- [[#flycheck][Flycheck]]
- [[#lspeglot][LSP/Eglot]]
- [[#company][Company]]
- [[#smartparens][Smartparens]]
- [[#dired-customization][Dired Customization]]
- [[#yasnippets][YASnippets]]
- [[#flyspell-mode][FlySpell Mode]]
- [[#text-scaling-setup][Text Scaling Setup]]
- [[#adding-icons-to-ux][Adding Icons to UX]]
  - [[#nerd-icons-for-dired][Nerd Icons For Dired]]
  - [[#scale-adjustment][Scale Adjustment]]
- [[#custom-vars-setting][Custom Vars Setting]]
- [[#centaur-tabs][Centaur Tabs]]

* Emacs Startup Performance
#+begin_src emacs-lisp

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Package Manager
#+begin_src emacs-lisp

(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Uncomment for systems which cannot create symlinks:
(elpaca-no-symlink-mode)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

#+end_src

* Wrapper using package-vc
#+begin_src emacs-lisp

(cl-defun slot/vc-install (&key (fetcher "github") repo name rev backend)
  "Install a package from a remote if it's not already installed.
This is a thin wrapper around `package-vc-install' in order to
make non-interactive usage more ergonomic.  Takes the following
named arguments:

- FETCHER the remote where to get the package (e.g., \"gitlab\").
  If omitted, this defaults to \"github\".

- REPO should be the name of the repository (e.g.,
  \"slotThe/arXiv-citation\".

- NAME, REV, and BACKEND are as in `package-vc-install' (which
  see)."
  (let* ((url (format "https://www.%s.com/%s" fetcher repo))
         (iname (when name (intern name)))
         (pac-name (or iname (intern (file-name-base repo)))))
    (unless (package-installed-p pac-name)
      (package-vc-install url iname rev backend))))

#+end_src

* Garbage Collection Magic Hack Package
#+begin_src emacs-lisp

(use-package gcmh
  :init
  (gcmh-mode 1))

#+end_src

* Basic Settings
** Defaults
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(setq use-dialog-box nil)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

(menu-bar-mode -1)

(setq ring-bell-function 'ignore)

(add-hook 'prog-mode-hook 'display-line-numbers-mode)
;; (setq display-line-numbers-type 'relative)

(recentf-mode 1)

(setq default-directory "c:/Users/Dell/")

(setq warning-minimum-level :emergency)

(global-auto-revert-mode 1)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

(save-place-mode 1)

#+end_src

** Electric Configuration
#+begin_src emacs-lisp

(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode 1)    ;; Turn On/Off the indention that Emacs does by default.

#+end_src

** Custom Requirements
#+begin_src emacs-lisp

(use-package emacs
  :ensure nil
  :init
  (defalias 'yes-or-no-p 'y-or-n-p))

(setq confirm-kill-emacs 'y-or-n-p)

(use-package emacs
  :ensure nil
  :init
  (defun display-startup-echo-area-message ()
    (message "")))

#+end_src

* Themes
#+begin_src emacs-lisp

(use-package ef-themes
  :config
  (load-theme 'ef-bio t)
  )

(use-package catppuccin-theme
  ;; :config
  ;; (load-theme 'catppuccin t)
  )

#+end_src

* Customization of Frame Alist
#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(font . "Monaco Nerd Font-15"))

(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

* Evil Mode
#+begin_src emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun my/minibuffer-custom-keys ()
  "Set custom keybindings for minibuffer."
  (local-set-key (kbd "C-j") 'next-line)
  (local-set-key (kbd "C-k") 'previous-line))

(add-hook 'minibuffer-setup-hook 'my/minibuffer-custom-keys)

(use-package evil
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link  t)

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode))

(use-package evil-indent-textobject)

(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))

(use-package evil-commentary
  :after evil
  :init
  (evil-commentary-mode))

#+end_src

* WhichKey
#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode 1)
  (setq which-key-idle-delay 1))

#+end_src

* Vertico
#+begin_src emacs-lisp

(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-resize nil
        vertico-cycle t
        vertico-scroll-margin 2
        vertico-count 5))

;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

;; (use-package vertico-posframe
;;   :after vertico
;;   :config
;;   (vertico-posframe-mode)
;;   (setq vertico-posframe-min-width 100))

(use-package savehist
  :ensure nil
  :init
  (savehist-mode)
  :config
  (setq history-length 25))

#+end_src

* Marginalia
#+begin_src emacs-lisp

(use-package marginalia
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode)
  :custom
  (marginalia-align 'right))

#+end_src

* Orderless
#+begin_src emacs-lisp

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

* Consult
#+begin_src emacs-lisp

(use-package consult
  :config
  (global-set-key (kbd "C-s") 'consult-line))

#+end_src

* General Key Bindings
#+begin_src emacs-lisp

(use-package general
  :ensure (:wait t)
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer wk/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (wk/leader-keys
    "SPC" '(execute-extended-command :wk "M-x")
    "RET" '(consult-bookmark :wk "Consult Bookmarks")
    "." '(find-file :wk "Find file")
    "<" '(consult-buffer :wk "Switch to buffer")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))

  (wk/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))
  
  (wk/leader-keys
    "c" '(flyspell-correct-wrapper :wk "Flyspell correct wrapper"))

  (wk/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d c" '(dired-cp-clean-folder :wk "CP Clean Directory")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d t" '(treemacs-select-directory :wk "Open directory in Treemacs"))

  (wk/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (wk/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
              (find-file "~/.emacs.d/config.org"))
            :wk "Open emacs config file")
    "f p" '((lambda () (interactive)
              (dired "~/.emacs.d/"))
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(consult-grep :wk "Search for string current file")
    "f f" '(find-file :wk "Find file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs/init.el"))
            :wk "Open emacs init.el")
    "f l" '(consult-locate :wk "Locate a file")
    "f r" '(consult-recent-file :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (wk/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

  (wk/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h p" '(describe-package :wk "Describe a package")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.emacs.d/init.el"))
              :wk "Reload emacs config")
    "h t" '(consult-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))
  
  (wk/leader-keys
    "i" '(package-install :wk "Package Installer"))

  (wk/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (wk/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (wk/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (wk/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(cmd :which-key "Toggle Shell")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name")
    "o p" '(treemacs :wk "Treemacs"))

  ;; projectile-command-map already has a ton of bindings
  ;; set for us, so no need to specify each individually.
  (wk/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (wk/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (wk/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (wk/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))


  (wk/leader-keys
    "y" '(:ignore t :wk "YASnippets")
    "y n" '(yas-new-snippet :wk "Create new YASnippet"))
  )

#+end_src

* Doom Modeline
#+begin_src emacs-lisp

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 45) (doom-modeline-bar-width 10)
           (doom-modeline-icon nil)
           (doom-modeline-window-width-limit 85)
           (doom-modeline-enable-word-count t)))

#+end_src

* Org Mode Configuration
** UI Customization
#+begin_src emacs-lisp

(setq org-edit-src-content-indentation 0)

(defun custom/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(use-package org
  :ensure nil
  :hook (org-mode . custom/org-mode-setup))

(use-package org-modern
  :hook (org-mode . org-modern-mode))

#+end_src

** Babel Configuration

#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+end_src

** Structure Templates

#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("lc" . "src c"))
(add-to-list 'org-structure-template-alist '("cp" . "src c++"))

#+end_src

** Toc
#+begin_src emacs-lisp

(use-package toc-org
  :init
  (add-hook 'org-mode-hook 'toc-org-enable)
  (add-hook 'org-mode-hook 'toc-org-insert-toc))

#+end_src

* Backup Files
#+begin_src emacs-lisp

(setq backup-directory-alist '((".*" . "~/.emacs.d/backup")))

#+end_src

* CP Setup
** Format Settings
#+begin_src emacs-lisp

(defun my-setup-indent (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local coffee-tab-width n) ; coffeescript
  (setq-local javascript-indent-level n) ; javascript-mode
  (setq-local js-indent-level n) ; js-mode
  (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
  (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq-local css-indent-offset n) ; css-mode
  )

(defun code-style ()
  (interactive)
  ;; use space instead of tab
  (setq indent-tabs-mode nil)
  ;; indent 4 spaces width
  (my-setup-indent 4))

(add-hook 'prog-mode-hook 'code-style)

#+end_src

** Tempalte Settings
#+begin_src emacs-lisp

;; ;; Load the auto-insert package
;; (require 'autoinsert)

;; ;; Define rules for auto-insert
;; (setq auto-insert-directory "c:/Users/Dell/Desktop/code/templates/") ;; Specify the directory where your templates are stored

;; (define-auto-insert "\\.cpp\\'" "template.cpp") ;; For .cpp files, insert template.cpp

;; (auto-insert-mode) ;; Enable auto-insert mode
;; (setq auto-insert-query nil) ;; Disable auto-insert confirmations

#+end_src

** Custom Codes
#+begin_src emacs-lisp

(defun dired-cp-clean-folder ()
  "Deletes all the files in a directory except the .clang-format file and recursively deletes
all directories except the one where this function is executed, if confirmed by the user."
  (interactive)
  (if (not (string-equal default-directory "c:/Users/Dell/Downloads/code/"))
      (let ((response (read-char-choice "Directory is not Downloads/code. Do you still want to continue? (y or n) " '(?y ?n))))
        (if (eq response ?y)
            (progn
              (let ((files (directory-files default-directory)))
                (dolist (file files)
                  (unless (member file '("." ".." ".clang-format"))
                    (let ((full-path (concat (file-name-as-directory default-directory) file)))
                      (if (file-directory-p full-path)
                          (delete-directory full-path t)
                        (delete-file full-path t)))))))
          (when (eq response ?n)
            (message ""))))

    ;; If already in the correct directory, proceed without confirmation
    (progn
      (let ((files (directory-files default-directory)))
        (dolist (file files)
          (unless (member file '("." ".." ".clang-format"))
            (let ((full-path (concat (file-name-as-directory default-directory) file)))
              (if (file-directory-p full-path)
                  (delete-directory full-path t)
                (delete-file full-path t)))))))))


#+end_src

* Editor Config
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook (lambda ()
                            (define-key prog-mode-map (kbd "RET") 'newline-and-indent)))

#+end_src

* Indent-Guide
#+begin_src emacs-lisp

(use-package indent-guide
  :hook (prog-mode . indent-guide-mode))

#+end_src

* Bracket Colorize 
#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Magit
#+begin_src emacs-lisp

(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Toggle-Term
#+begin_src emacs-lisp

(defun cmd()
  "Open an external Windows cmd in the current directory"
  (interactive)
  (let ((default-directory
         (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
           default-directory))))
  (call-process-shell-command "start cmd"))

#+end_src

* Format-All  
#+begin_src emacs-lisp

(use-package format-all
  :commands format-all-mode
  :hook (prog-mode . format-all-mode)
  :config
  (setq-default format-all-formatters
                '(("C++"   (clang-format)))))

#+end_src

* Hl Line Mode
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'org-mode-hook 'hl-line-mode)

#+end_src

* Flycheck
#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+end_src

* LSP/Eglot
#+begin_src emacs-lisp

(use-package lsp-mode
  :hook (c++-mode . lsp-mode)
  :config
  (setq lsp-completion-enable nil))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover nil))

(use-package treemacs-all-the-icons)

(use-package lsp-treemacs)

;; (use-package eglot
;;   :ensure nil
;;   :hook (prog-mode . eglot-ensure))

#+end_src

* Company
#+begin_src emacs-lisp

(use-package company
  :config
  :hook (org-mode text-mode)
  :config
  (setq company-idle-delay 0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

* Smartparens
#+begin_src emacs-lisp

(use-package smartparens
  :hook (prog-mode org-mode)
  :config

  ;; Disable smartparens faces
  (setq sp-highlight-pair-overlay nil)  ;; Disable highlighting of matching pairs
  (setq sp-highlight-wrap-overlay nil)  ;; Disable highlighting of wrapped regions
  (setq sp-highlight-wrap-tag-overlay nil)  ;; Disable highlighting of wrap tags
  (setq sp-highlight-pair-tag-overlay nil)  ;; Disable highlighting of pair tags

  (sp-with-modes '(c++-mode)
    (sp-local-pair "{" "}" :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET")))))

#+end_src

* Dired Customization
#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single)

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

* YASnippets
#+begin_src emacs-lisp

(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("c:/Users/Dell/Desktop/cp/snippets/"))
  (yas-global-mode 1))

#+end_src

* FlySpell Mode
#+begin_src emacs-lisp

(setq ispell-dictionary "en_US")

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

(use-package flyspell-correct
  :after flyspell)

(use-package flyspell-correct-popup
  :after flyspell-correct)

#+end_src

* Text Scaling Setup
#+begin_src emacs-lisp

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* Adding Icons to UX
#+begin_src emacs-lisp

(use-package all-the-icons
  :if (display-graphic-p))

#+end_src

** Nerd Icons For Dired
#+begin_src emacs-lisp

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

#+end_src

** Scale Adjustment
#+begin_src emacs-lisp

(setq-default nerd-icons-scale-factor 1.4)

#+end_src

* Custom Vars Setting
#+begin_src emacs-lisp

(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)

#+end_src

* Centaur Tabs
#+begin_src emacs-lisp

(use-package centaur-tabs
  :custom
  (centaur-tabs-set-icons t)
  (centaur-tabs-height 45)
  (centaur-tabs-set-bar 'under)
  (x-underline-at-descent-line t)
  (centaur-tabs-show-new-tab-button t)
  (centaur-tabs-set-close-button nil)
  (centaur-tabs-enable-ido-completion nil))

#+end_src
